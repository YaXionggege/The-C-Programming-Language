#include<stdio.h>
#include<stdlib.h>  //提供system("cls");清屏函数
#include<conio.h>   //提供getch()、kbhit()函数
#include<Windows.h> //提供void gotoxy(intx,inty);函数

//全局变量
int position_x,position_y;  //飞机位置
int bullet_x,bullet_y;      //子弹位置
int enemy_x,enemy_y;        //敌机位置
int high, width;          //游戏画面尺度
int score;              //得分

 void startup()       //数据初始化
 {
 	score = 0;
	 high = 20;
	 width = 30;
	 position_x = high/2;
	 position_y = width/2;
	 bullet_x = -1;
	 bullet_y = position_y;
	 enemy_x = 0;
	 enemy_y = position_y; 
 } 
 
 void gotoxy(int x,int y)  /*将光标移动到（x,y）位置*/
 {
 	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
 	COORD pos;
 	pos.X = x;
 	pos.Y = y;
 	SetConsoleCursorPosition(handle,pos);
 }
 
 void show()    /*展示画面*/
 {
 	 //system("cls");   //清屏 
 gotoxy(0,0); //光标移动到原位置，以下重画清屏
 int i,j;
 for(i = 0;i < high;i++)
 {
 	for(j = 0;j < width;j++)
 	{
	 	if((i == position_x)&&(j == position_y))
	 	printf("*");    //输出飞机*
		else if ((i == enemy_x)&&(j == enemy_y)) 
		printf("@");    //输出敌机@
		else if((i == bullet_x)&&(j == bullet_y)) 
		printf("|");   //子弹判断
		else
		printf(" ");   //输出空格    
	 }
	 printf("\n"); 
 } 
 printf("得分:%d\n",score);
 }
 
void updateWithoutlnput()  /*与用户输入无关的更新*/
{
	if (bullet_x > -1)
	bullet_x--;
	
	//用来控制敌机向下移动的速度，每隔几次循环才移动一次敌机
	//这样修改，虽然用户按键的交互速度还是很快，但NPC的移动显示可以降速
	static int speed = 0;
	if(speed < 10)
	{
		speed++;
	} 
	if(speed == 10)
	{
		enemy_x = -1; 
		enemy_y = rand() % width;
		bullet_x = -2;   //子弹无效（防止穿射）【等于0以下均可，这里只-2标识被击落】 
	}
	
	if (enemy_x > high)  //敌机抛出显示屏幕
	{
		enemy_x = -1;     //产生新的飞机
		enemy_y = rand()%width; 
	} 
	
}

void updateWithlnput()   /*与用户输入有关的更新*/
{
	char input;
	if(kbhit())        //判断是否有输入
	{
	input = getch();   //根据用户的不同输入来移动，不必输入回车
	if(input == 'a')
	position_y--;      //位置左移 
	if(input == 'd')
	position_y++;      //位置右移   
	if(input == 'w')
	position_x--;      //位置上移
	if(input == 's')
	position_x++;      //位置下移
	if(input == ' ')
	{
	bullet_x = position_x-1; //发射子弹的初始位置在飞机的正上方
	bullet_y = position_y;	
	}	
	} 
}

int main()
{
	startup();       //数据初始化
	while(1){        //游戏循环执行
	    show();   //显示画面 
		updateWithoutlnput(); //与用户输入无关的更新
		updateWithlnput();    //与用户输入有关的更新 
	}
	
	return 0;
}

   
   
 
