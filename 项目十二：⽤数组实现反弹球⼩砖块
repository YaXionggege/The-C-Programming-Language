#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <conio.h>
#define HIGH 15 // 游戏画⾯尺⼨
#define WIDTH 20
// 全局变量
int ball_x, ball_y; // ⼩球的坐标
int ball_vx, ball_vy; // ⼩球的速度
int position_x, position_y; // 挡板的中⼼坐标
int radius; // 挡板的半径⼤⼩
int left, right; // 挡板的左右位置
int canvas[HIGH][WIDTH] = { 0 }; // ⼆维数组存储游戏画布中对应的元素
// 0为空格，1为⼩球o，2为挡板,3为砖块#
void gotoxy(int x, int y) /* 将光标移动到(x,y)位置 */
{
HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
COORD pos;
pos.X = x;
pos.Y = y;
SetConsoleCursorPosition(handle, pos);
}// 替代system("cls")清屏函数
void startup()
{
ball_x = 0;
ball_y = WIDTH / 2;
ball_vx = 1;
ball_vy = 1;
canvas[ball_x][ball_y] = 1;
radius = 5;
position_x = HIGH - 1;
position_y = WIDTH / 2;
left = position_y - radius;
right = position_y + radius;
int k, i;
for ( k = left; k <= right; k++ )
canvas[position_x][k] = 2;
for ( k = 0; k < WIDTH; k++ )
{
for ( i = 0; i < HIGH / 4; i++ )
canvas[i][k] = 3;
}
}
void show()
{
gotoxy(0,0);
int i, j;
for ( i = 0; i < HIGH; i++ )
{
for ( j = 0; j < WIDTH; j++ )
{
if ( canvas[i][j] == 0 )
printf(" "); // 输出空格
else if ( canvas[i][j] == 1 )
printf("o"); // 输出⼩球o
else if ( canvas[i][j] == 2 )
printf("*"); // 输出挡板
else if ( canvas[i][j] == 3 )
printf("#"); // 输出砖块#
}
printf("|\n"); // 显⽰右边界
}
for( j = 0; j < WIDTH; j++ )
printf("-"); // 显⽰下边界
printf("\n");
}
void updateWithoutInput() /* 与⽤户输⼊⽆关的更新 */
{
if ( ball_x == HIGH - 2 )
{
if ( (ball_y >= left) && (ball_y <= right) )
printf("\a"); // 被挡板挡住响铃
else // 没有被挡板挡住
{
printf("游戏失败\n");
system("pause");
exit(EXIT_FAILURE);
}
}
static int speed = 0;
if ( speed < 7 )
speed++;
if ( speed == 7 )
{
speed = 0;
canvas[ball_x][ball_y] = 0;
// 更新⼩球的坐标
ball_x = ball_x + ball_vx;
ball_y = ball_y + ball_vy;
canvas[ball_x][ball_y] = 1;
// 碰到边界后反弹
if ( (ball_x == 0) || (ball_x == HIGH - 2) )
ball_vx = -ball_vx;
if ( (ball_y == 0) || (ball_y == WIDTH - 1) )
ball_vy = -ball_vy;
// 碰到砖块后反弹
if ( canvas[ball_x - 1][ball_y] == 3 )
{
ball_vx = -ball_vx;
canvas[ball_x - 1][ball_y] = 0;
printf("\a");
}
}
}
void updateWithInput() /* 与⽤户输⼊⽆关的更新 */
{
char input;
if ( kbhit() ) // 判断是否有输⼊
{
input = getch(); // 根据⽤户的不同输⼊来移动，不必输⼊回车
if ( input == 'a' && left > 0)
{
canvas[position_x][right] = 0;
position_y--; // 位置左移
left = position_y - radius;
right = position_y + radius;
canvas[position_x][left] = 2;
}
if ( input == 'd' && right < WIDTH - 1 )
{
canvas[position_x][left] = 0;
position_y++; // 位置右移
left = position_y - radius;
right = position_y + radius;
canvas[position_x][right] = 2;
}
}
}
int main(void)
{
startup(); // 数据的初始化
while ( 1 ) // 游戏循环执⾏
{
show(); // 显⽰画⾯
updateWithoutInput(); // 与⽤户输⼊⽆关的更新
updateWithInput(); // 与⽤户输⼊有关的更新
}
return 0;
}
