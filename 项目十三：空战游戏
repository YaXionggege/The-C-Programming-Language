#include <stdlib.h>
#include <conio.h>
#include <Windows.h>
#define HIGH 25 // 游戏画⾯尺⼨
#define WIDTH 50
#define EnemyNum 5
// 全局变量
int position_x, position_y; // 飞机的位置
int enemy_x[EnemyNum], enemy_y[EnemyNum]; // 敌机的位置
int canvas[HIGH][WIDTH] = {0}; // ⼆位数组存储游戏画布中对应的元素
// 0为空格，1为飞机， 2为⼦弹|， 3为敌机@
int score;
int BulletWidth; // ⼦弹的宽度
int EnemyMoveSpeed; // 敌机的移动速度
void gotoxy(int x, int y) /* 将光标移动到(x,y)位置 */
{
HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
COORD pos;
pos.X = x;
pos.Y = y;
SetConsoleCursorPosition(handle, pos);
}// 替代system("cls")清屏函数
void startup() /* 数据的初始化 */
{
position_x = HIGH / 2;
position_y = WIDTH / 2;
canvas[position_x][position_y] = 1;
int k;
for ( k = 0; k < EnemyNum; k++ )
{
enemy_x[k] = rand() % 2;
enemy_y[k] = rand() % WIDTH;
canvas[enemy_x[k]][enemy_y[k]] = 3;
}
score = 0;
BulletWidth = 0;
EnemyMoveSpeed = 20;
}
void show() // 显⽰画⾯
{
gotoxy(0,0); // 光标移动到原点位置，以下重画清屏
int i, j;
for ( i = 0; i < HIGH; i++ )
{
for ( j = 0; j < WIDTH; j++ )
{
if ( canvas[i][j] == 0 )
printf(" "); // 输出空格
else if ( canvas[i][j] == 1 )
printf("*"); // 输出飞机*
else if ( canvas[i][j] == 2 )
printf("|"); // 输出⼦弹|
else if ( canvas[i][j] == 3 )
printf("@"); // 输出敌机@
}
printf("\n");
}
printf("得分：%3d\n", score);
//Sleep(20);
}
void updateWithoutInput() /* 与⽤户输⼊⽆关的更新 */
{
int i, j, k;
for ( i = 0; i < HIGH; i++ )
{
for ( j = 0; j < WIDTH; j++ )
{
if ( canvas[i][j] == 2 ) // ⼦弹向上移动
{
for ( k = 0; k < EnemyNum; k++ )
{
if ( (i == enemy_x[k]) && (j == enemy_y[k]) ) // ⼦弹击中敌机
{
score++; // 分数加1
if ( score % 5 == 0 && EnemyMoveSpeed > 3 ) // 达到移动积分后敌机变快
EnemyMoveSpeed--;
if ( score % 5 == 0 ) // 达到⼀定积分后⼦弹变厉害
BulletWidth++;
canvas[enemy_x[k]][enemy_y[k]] = 0;
enemy_x[k] = rand() % 2; // 产⽣新的飞机
enemy_y[k] = rand() % WIDTH;
canvas[enemy_x[k]][enemy_y[k]] = 3;
canvas[i][j] = 0; // ⼦弹消失
}
}
// ⼦弹向上移动
canvas[i][j] = 0;
if ( i > 0 )
canvas[i - 1][j] = 2;
}
}
}
static int speed = 0;
if ( speed < EnemyMoveSpeed )
speed++;
for ( k = 0; k < EnemyNum; k++ )
{
if ( (position_x == enemy_x[k]) && (position_y == enemy_y[k]) ) // 敌机撞到我机
{
printf("失败!\n");
Sleep(3000);
system("pause");
exit(EXIT_FAILURE);
}
if ( enemy_x[k] > HIGH ) // 敌机抛出显⽰屏幕
{
canvas[enemy_x[k]][enemy_y[k]] = 0;
enemy_x[k] = rand() % 2;
enemy_y[k] = rand() % WIDTH;
canvas[enemy_x[k]][enemy_y[k]] = 3;
score--; // 减分
}
if ( speed == EnemyMoveSpeed )
{
// 敌机下落
for ( k = 0; k < EnemyNum; k++ ) // 这⾥最好再定义⼀个变量，为了⽅便就不定义了
{
canvas[enemy_x[k]][enemy_y[k]] = 0;
enemy_x[k]++;
canvas[enemy_x[k]][enemy_y[k]] = 3;
speed = 0;
}
}
}
}
void updateWithInput() /* 与⽤户输⼊有关的更新 */
{
int k;
char input;
if ( kbhit() ) // 判断是否有输⼊
{
input = getch(); // 根据⽤户的不同输⼊来移动，不必输⼊回车
if ( input == 'a' )
{
canvas[position_x][position_y] = 0;
position_y--; // 位置左移
canvas[position_x][position_y] = 1;
}else if ( input == 'd' )
{
canvas[position_x][position_y] = 0;
position_y++; // 位置右移
canvas[position_x][position_y] = 1;
}else if ( input == 'w' )
{
canvas[position_x][position_y] = 0;
position_x--; // 位置上移
canvas[position_x][position_y] = 1;
}else if ( input == 's' )
{
canvas[position_x][position_y] = 0;
position_x++; // 位置下移
canvas[position_x][position_y] = 1;
}else if ( input == ' ' )
{
int left = position_y - BulletWidth;
int right = position_y + BulletWidth;
if ( left < 0 )
left = 0;
if ( right > WIDTH - 1)
right = WIDTH - 1;
for ( k = left; k <= right; k++ ) // 发射⼦弹
canvas[position_x - 1][k] = 2; // 发射⼦弹的初始化位置再飞机的正上⽅
}
}
}
int main(void)
{
startup(); // 游戏的初始化
while ( 1 ) // 游戏循环执⾏
{
show(); // 显⽰画⾯
updateWithoutInput(); // 与⽤户输⼊⽆关的更新
updateWithInput(); // 与⽤户输⼊有关的更新
}
return 0;
}
